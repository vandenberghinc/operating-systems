#!/usr/bin/bash
echo "Installing Ubuntu."

# functions.
function osinfo() {
    user=$(echo $USER)
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        os="linux"
        group="root"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        os="macos"
        group="wheel"
    elif [[ "$OSTYPE" == "cygwin" ]]; then
       os="posix"     # POSIX compatibility layer and Linux environment emulation for Windows
       group="root"
    elif [[ "$OSTYPE" == "msys" ]]; then
        os="mysys"    # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
        group="root"
    elif [[ "$OSTYPE" == "win32" ]]; then
        os="win32"    # I'm not sure this can happen.
        group="root"
    elif [[ "$OSTYPE" == "freebsd"* ]]; then
        os="freebsd"    # ...
        group="root"
    else
        os="unknown"    # Unknown.
        group="root"
    fi
    #echo "Operating system: "$os
}
function log() {
    if [ "$2" == "done" ]; then
        echo "$1 ... done"
        echo ""
    elif [ "$2" == "failed" ]; then
        echo "$1 ... failed"
    elif [ "$2" == "error" ]; then
        echo "$1 ... failed"
    else
        echo "$1 ..."
    fi
}
function argument_present() {
    c=0
    success="false"
    for var in "$@"
    do
        if (( c > 0 )) ; then
            if [ "$var" == "$1" ] ; then
                success="true"
                break
            fi
        fi
        ((c=c+1))
    done
    echo $success
}
function get_argument() {
    c=0
    success="false"
    value="none"
    for var in "$@"
    do
        if (( c > 0 )) ; then
            if [ "$var" == "$1" ] ; then
                success="true"
            elif [ "$success" == "true" ] ; then
                value=$var
                break
            fi
        fi
        ((c=c+1))
    done
    echo $value
}

# arguments.
osinfo
FULL_ACCESS=$(argument_present "--full-access" $@)
FULL_ACCESS=$(argument_present "--full-access" $@)

# help.
HELP1=$(argument_present "--help" $@)
HELP2=$(argument_present "-h" $@)
if [[ "$HELP1" == "true" ]]  || [[ "$HELP2" == "true" ]] ; then
    echo """Description: $alias installer script.
Usage: ./installer <mode> <options> 
Modes:
    -h / --help         Show the documentaton.
Options:
	--full-access       Install sudo commands without password for the executing user.
Author: Daan van den Bergh. 
Copyright: Â© Daan van den Bergh 2021. All rights reserved."""
    exit 0
fi

# System Update
sudo apt-get -y update && sudo apt-get -y upgrade
sudo apt --assume-yes install members
sudo apt --assume-yes install screen
sudo apt-get --assume-yes install tmux
sudo apt-get -y install git python3 python3-pip
sudo apt-get -y install python3
sudo apt-get -y install python3-pip
pip3 install syst3m cl1 fil3s r3sponse pathlib
sudo touch /usr/local/bin/syst3m
sudo chown $user /usr/local/bin/syst3m
python3 -c "import syst3m" --create-alias syst3m

# set password.
echo ""
echo "Enter a new strong password for user: root"
sudo passwd root

# check users.
if [[ $(id administrator) =~ "no such user" ]] ; then
	syst3m --user administrator --create
	echo ""
	echo "Enter a new strong password for user: administrator"
	sudo passwd administrator
fi

# Basic:
sudo apt --assume-yes install curl

# Root Priviliges:
if [[ "$FULL_ACCESS" == "true" ]] ; then
	echo "Installing root priviliges for the the current user..."
	sudo echo "\n# Root priviliges without password" >> /etc/sudoers
	sudo echo $USER" ALL(ALL) NOPASSWD:ALL" >> /etc/sudoers
fi

# Make home dir not writeable to others.
chmod go-w /home/$USE

# Install network tools:
echo "Installing network tools..."
sudo apt --assume-yes install net-tools
sudo apt-get --assume-yes install sshfs

# Sublime Text:
echo "Installing Sublime Text..."
sudo apt -y install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
sudo add-apt-repository "deb https://download.sublimetext.com/ apt/stable/"
sudo apt -y install sublime-text
echo "Finished installing Sublime Text."
echo "Open the sublime editor with command $ subl /path/to/file"

# Enable SSH
echo "Enabling SSH..."
sudo apt-get --assume-yes install openssh-server
#sudo systemctl status ssh
sudo ufw allow ssh
chmod 700 .ssh
touch .ssh/authorized_keys 
chmod 600 .ssh/authorized_keys
touch .ssh/config 
chmod 644 .ssh/config 
touch .ssh/known_hosts 
chmod 644 .ssh/known_hosts 

# Installing Python
echo "Installing python..."
sudo apt-get upgrade python3
sudo apt-get --assume-yes install build-essential cmake pkg-config
sudo apt-get --assume-yes install libx11-dev libatlas-base-dev
sudo apt-get --assume-yes install libgtk-3-dev libboost-python-dev
sudo apt-get --assume-yes install python-dev python-pip python3-dev python3-pip
sudo apt-get --assume-yes install python3-venv
sudo apt-get  --assume-yes install python3-setuptools
sudo apt -y install --assume-yes python3-pip
sudo -H pip3 install -U pip numpy

# Yubico Manager (Smart Cards)
sudo apt-add-repository --assume-yes ppa:yubico/stable
sudo apt --assume-yes install yubikey-manager
sudo apt-get --assume-yes install -y yubico-piv-tool

# Speech Recognition:
sudo apt-get --assume-yes install espeak
sudo apt-get --assume-yes install libespeak-dev

#   PyAudio:
sudo apt-get --assume-yes install libasound-dev portaudio19-dev libportaudio2 libportaudiocpp0
sudo apt-get --assume-yes install ffmpeg:i386 libavdevice58:i386

# VanDenBerghInc.
sudo apt-get -y install opensc
pip3 install netw0rk --upgrade && python3 -c "import netw0rk" --create-alias
pip3 install ssht00ls --upgrade && python3 -c "import ssht00ls" --create-alias
#pip3 install syst3m --upgrade && python3 -c "import syst3m" --create-alias
pip3 install encrypti0n --upgrade && python3 -c "import encrypti0n" --create-alias

# Completion:
echo "Installation completed."
